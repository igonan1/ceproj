//
//
//
//
//
//16...
//8,9,10,11,12,13,14,15,
//0,1,2,3,4,5,6,7, (1rank)
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
static int convert(int x, int y) {
    return x + 8 * y;
}
struct bitboard {
    uint64_t pawn;
    uint64_t knight;
    uint64_t bishop;
    uint64_t rook;
    uint64_t queen;
    uint64_t king;
};
typedef struct bitboard board;
//board white = { (uint64_t)(0xff00),(uint64_t)(0b01000010),(uint64_t)(0b00100100),(uint64_t)(0b10000001),(uint64_t)(0b00001000),(uint64_t)0b00010000 };
//board black = { (uint64_t)0xff << 48,(uint64_t)0b01000010 << 56,(uint64_t)0b00100100 << 56,(uint64_t)0b10000001 << 56,(uint64_t)0b00001000 << 56,(uint64_t)0b00010000 << 56 };
typedef struct bitboard board;
board white = { (uint64_t)(0x00),(uint64_t)0,(uint64_t)0,(uint64_t)0,(uint64_t)(0b00000001),(uint64_t)0b00010000 };
board black = { (uint64_t)0x00,(uint64_t)0,(uint64_t)0,(uint64_t)0x0,(uint64_t)0b00001000,(uint64_t)0b00010000 << 56 };
static int popcnt(uint64_t n) {
    uint64_t a = n;
    int depth = 0;
    for (int i = 0; a != 0; i++) {
        a = a & (a - 1);
        depth++;
    }
    return depth;
}
static int location(uint64_t selected_board, uint8_t n) {//location of nth bit
    int count = 0;
    uint8_t table[64] = { 0 };
    if ((n+1 > popcnt(selected_board)) | (popcnt(selected_board) == 0)) {
        return -1;//invalid
    }
    for (int i = 0; i < 64; i++) {
        if ((selected_board >> i) & 1) {
            table[count] = i;
            count++;
        }
    }
    return table[n];
}
static int check_square(board white, board black, uint8_t pos, int color) {//0=white 1=black 2=all
    switch (color) {
    case(0):
        if (((white.pawn >> pos) & 1) | ((white.knight >> pos) & 1) | ((white.bishop >> pos) & 1) | ((white.rook >> pos) & 1) | ((white.queen >> pos) & 1) | ((white.king >> pos) & 1)) { return 1; }
        break;
    case(1):
        if (((black.pawn >> pos) & 1) | ((black.knight >> pos) & 1) | ((black.bishop >> pos) & 1) | ((black.rook >> pos) & 1) | ((black.queen >> pos) & 1) | ((black.king >> pos) & 1)) { return 1; }
        break;
    case(2):
        if (((white.pawn >> pos) & 1) | ((white.knight >> pos) & 1) | ((white.bishop >> pos) & 1) | ((white.rook >> pos) & 1) | ((white.queen >> pos) & 1) | ((white.king >> pos) & 1)) {
            if (((black.pawn >> pos) & 1) | ((black.knight >> pos) & 1) | ((black.bishop >> pos) & 1) | ((black.rook >> pos) & 1) | ((black.queen >> pos) & 1) | ((black.king >> pos) & 1)) { return 1; }
        }
        break;
    }
    return 0;
}
static void legal_move_generator_withoutcheck(bool color,board white, board black, int* move_storage) {
    int friendly = color;
    int enemy = !color;
    int pawncnt;
    int knightcnt;
    int bishopcnt;
    int rookcnt;
    int queencnt;
    int* table;
    table = (int*)malloc(2000 * sizeof(int));//form of (original coordinate, next coordinate),
    //0~5th bit to board, 6th bit to promote to bishop, 7th bit to knight, 8th bit to rook, 9th bit to queen
    int length = 0;
    int pos;
    int x;
    int y;
    int knight_move[8][2] = { {1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1} };//dx,dy
    int king_move[8][2] = { {1,1},{1,-1},{-1,1},{-1,-1},{1,0},{0,-1},{-1,0},{0,1} };
    int bishop_move[4][2] = { {1,1},{1,-1},{-1,1},{-1,-1} };
    int rook_move[4][2] = { {1,0},{-1,0},{0,1},{0,-1} };
    if (!color) {
        pawncnt = popcnt(white.pawn);
    }
    else {
        pawncnt = popcnt(black.pawn);
    }
    for (int i = 0; i < pawncnt; i++) {//pawn
        if (!color) {
            pos = location(white.pawn, i);
        }
        else {
            pos = location(black.pawn, i);
        }
        x = pos % 8;
        y = pos / 8;
        if (!check_square(white, black, pos + 8 - 16 * color, 2)) {
            if (y == 6-5*color) {
                for (int j = 6; j < 10; j++) {//promotion
                    table[length] = pos;
                    table[length + 1] = (pos + 8 - 16 * color) | (1 << j);
                    length += 2;
                }
            }
            else {//move 1sq forward
                table[length] = pos;
                table[length + 1] = pos + 8 - 16 * color;
                length += 2;
                if (y == 1 + 5 * color) {//move 2sq forward
                    if (!check_square(white, black, pos + 16 - 32 * color, 2)) {
                        table[length] = pos;
                        table[length + 1] = pos + 16 - 32 * color;
                        length += 2;
                    }
                }
            }
        }
        if (x != 0) {
            if (check_square(white, black, pos + 7-16*color, enemy)) {
                table[length] = pos;
                table[length + 1] = pos + 7 - 16 * color, enemy;
                length += 2;
            }
        }
        if (x != 7) {
            if (check_square(white, black, pos + 9-16*color, enemy)) {
                table[length] = pos;
                table[length + 1] = pos + 9 - 16 * color;
                length += 2;
            }
        }
    }
    if (!color) {
        knightcnt = popcnt(white.knight);
    }
    else {
        knightcnt = popcnt(black.knight);
    }
    for (int i = 0; i < knightcnt; i++) {
        if (!color) {
            pos = location(white.knight, i);
        }
        else {
            pos = location(black.knight, i);
        }
        x = pos % 8;
        y = pos / 8;
        for (int j = 0; j < 8; j++) {
            if ((0 <= x + knight_move[j][0]) & (x + knight_move[j][0] < 8) & (0 <= y + knight_move[j][1]) & (y + knight_move[j][1] < 8)) {
                if (!check_square(white, black, convert(x + knight_move[j][0], y + knight_move[j][1]), friendly)) {
                    table[length] = pos;
                    table[length + 1] = convert(x + knight_move[j][0], y + knight_move[j][1]);
                    length += 2;
                }
            }
        }
    }
    if (!color) {
        bishopcnt = popcnt(white.bishop);
    }
    else {
        bishopcnt = popcnt(black.bishop);
    }
    for (int i = 0; i < bishopcnt; i++) {
        if (!color) {
            pos = location(white.bishop, i);
        }
        else {
            pos = location(black.bishop, i);
        }
        x = pos % 8;
        y = pos / 8;
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k < 8; k++) {
                if ((0 <= x + k * bishop_move[j][0]) && (x + k * bishop_move[j][0] < 8) && (0 <= y + k * bishop_move[j][1]) && (y + k * bishop_move[j][1] < 8)) {
                    if (!check_square(white, black, convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]), friendly)) {
                        table[length] = pos;
                        table[length + 1] = convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]);
                        length += 2;
                        if (check_square(white, black, convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]), enemy)) {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
    }
    if (!color) {
        rookcnt = popcnt(white.rook);
    }
    else {
        rookcnt = popcnt(black.rook);
    }
    for (int i = 0; i < rookcnt; i++) {
        if (!color) {
            pos = location(white.rook, i);
        }
        else {
            pos = location(black.rook, i);
        }
        x = pos % 8;
        y = pos / 8;
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k < 8; k++) {
                if ((0 <= x + k * rook_move[j][0]) & (x + k * rook_move[j][0] < 8) & (0 <= y + k * rook_move[j][1]) & (y + k * rook_move[j][1] < 8)) {
                    if (!check_square(white, black, convert(x + k * rook_move[j][0], y + k * rook_move[j][1]), friendly)) {
                        table[length] = pos;
                        table[length + 1] = convert(x + k * rook_move[j][0], y + k * rook_move[j][1]);
                        length += 2;
                        if (check_square(white, black, convert(x + k * rook_move[j][0], y + k * rook_move[j][1]), enemy)) {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
    }
    if (!color) {
        queencnt = popcnt(white.queen);
    }
    else {
        queencnt = popcnt(black.queen);
    }
    for (int i = 0; i < queencnt; i++) {
        if (!color) {
            pos = location(white.queen, i);
        }
        else {
            pos = location(black.queen, i);
        }
        x = pos % 8;
        y = pos / 8;
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k < 8; k++) {
                if ((0 <= x + k * rook_move[j][0]) & (x + k * rook_move[j][0] < 8) & (0 <= y + k * rook_move[j][1]) & (y + k * rook_move[j][1] < 8)) {
                    if (!check_square(white, black, convert(x + k * rook_move[j][0], y + k * rook_move[j][1]), friendly)) {
                        table[length] = pos;
                        table[length + 1] = convert(x + k * rook_move[j][0], y + k * rook_move[j][1]);
                        length += 2;
                        if (check_square(white, black, convert(x + k * rook_move[j][0], y + k * rook_move[j][1]), enemy)) {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k < 8; k++) {
                if ((0 <= x + k * bishop_move[j][0]) & (x + k * bishop_move[j][0] < 8) & (0 <= y + k * bishop_move[j][1]) & (y + k * bishop_move[j][1] < 8)) {
                    if (!check_square(white, black, convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]), friendly)) {
                        table[length] = pos;
                        table[length + 1] = convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]);
                        length += 2;
                        if (check_square(white, black, convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]), enemy)) {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
    }
    if (!color) {
        pos = location(white.king, 0);
    }
    else {
        pos = location(black.king, 0);
    }
    x = pos % 8;
    y = pos / 8;
    for (int j = 0; j < 8; j++) {
        if ((0 <= x + king_move[j][0]) & (x + king_move[j][0] < 8) & (0 <= y + king_move[j][1]) & (y + king_move[j][1] < 8)) {
            if (!check_square(white, black, convert(x + king_move[j][0], y + king_move[j][1]), friendly)) {
                table[length] = pos;
                table[length + 1] = convert(x + king_move[j][0], y + king_move[j][1]);
                length += 2;
            }
        }
    }
    for (int i = 0; i < length; i++) {
        move_storage[i] = table[i];
    }
    move_storage[length] = -1;
    move_storage[length + 1] = -1;//end of storage
    free(table);
}
static void move(board* chessboard,board white,board black,int pos1,int pos2) {
    if ((black.pawn >> pos2) & 1) {
        black.pawn = black.pawn^((uint64_t)1 << pos2);
    }
    if ((black.knight >> pos2) & 1) { 
        black.knight = black.knight ^ ((uint64_t)1 << pos2); 
        
    }
    if ((black.bishop >> pos2) & 1) { 
        black.bishop = black.bishop^ ((uint64_t)1 << pos2);
    }
    if ((black.rook >> pos2) & 1) { black.rook = black.rook ^ ((uint64_t)1 << pos2); }
    if ((black.queen >> pos2) & 1) { black.queen = (black.queen) ^ ((uint64_t)1 << pos2); }
    if ((black.king >> pos2) & 1) { black.king = (black.king) ^ ((uint64_t)1 << pos2); }
    if ((white.pawn >> pos2) & 1) { white.pawn = (white.pawn) ^ ((uint64_t)1 << pos2); }
    if ((white.knight >> pos2) & 1) { white.knight = (white.knight) ^ ((uint64_t)1 << pos2);}
    if ((white.bishop >> pos2) & 1) { white.bishop = (white.bishop) ^ ((uint64_t)1 << pos2);}
    if ((white.rook >> pos2) & 1) { white.rook =white.rook ^ ((uint64_t)1 << pos2);}
    if ((white.queen >> pos2) & 1) { white.queen = white.queen ^ ((uint64_t)1 << pos2);}
    if ((white.king >> pos2) & 1) { white.king = (white.king) ^ ((uint64_t)1 << pos2); }
    if ((black.pawn >> pos2) & 1) {
        black.pawn = (black.pawn)^((uint64_t)1 << pos2);
    }
    if ((black.knight >> pos1) & 1) { black.knight = (black.knight | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1); }
    if ((black.bishop >> pos1) & 1) { black.bishop = (black.bishop | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1); }
    if ((black.rook >> pos1) & 1) { black.rook = (black.rook | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1); }
    if ((black.queen >> pos1) & 1) { black.queen = (black.queen | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1); }
    if ((black.king >> pos1) & 1) { black.king = (black.king | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1); }
    if ((white.pawn >> pos1) & 1) { white.pawn = (white.pawn | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1); }
    if ((white.knight >> pos1) & 1) { white.knight = (white.knight | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1);}
    if ((white.bishop >> pos1) & 1) { white.bishop = (white.bishop | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1);}
    if ((white.rook >> pos1) & 1) { white.rook = (white.rook | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1);}
    if ((white.queen >> pos1) & 1) { white.queen = (white.queen | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1);}
    if ((white.king >> pos1) & 1) { white.king = (white.king | ((uint64_t)1 << pos2)) ^ ((uint64_t)1 << pos1); }
    chessboard[0] = white;
    chessboard[1] = black;
}
static bool isattacked(bool color, board white, board black, int pos) {
    int *buff=(int*)malloc(sizeof(int)*2000);
    if (check_square(white, black, pos, !color)) {
        if (!color) {
            if ((black.pawn >> pos) & 1) { black.pawn ^= (uint64_t)1 << pos; }
            if ((black.knight >> pos) & 1) { black.knight ^= (uint64_t)1 << pos; }
            if ((black.bishop >> pos) & 1) { black.bishop ^= (uint64_t)1 << pos; }
            if ((black.rook >> pos) & 1) { black.rook ^= (uint64_t)1 << pos; }
            if ((black.queen >> pos) & 1) { black.queen ^= (uint64_t)1 << pos; }
            if ((black.king >> pos) & 1) { black.king ^= (uint64_t)1 << pos; }
        }
        else {
            if ((white.pawn >> pos) & 1) { white.pawn ^= (uint64_t)1 << pos; }
            if ((white.knight >> pos) & 1) { white.knight ^= (uint64_t)1 << pos; }
            if ((white.bishop >> pos) & 1) { white.bishop ^= (uint64_t)1 << pos; }
            if ((white.rook >> pos) & 1) { white.rook ^= (uint64_t)1 << pos; }
            if ((white.queen >> pos) & 1) { white.queen ^= (uint64_t)1 << pos; }
            if ((white.king >> pos) & 1) { white.king ^= (uint64_t)1 << pos; }
        }
    }
    legal_move_generator_withoutcheck(!color, white, black, buff);
    for (int i = 0; buff[2 * i + 1] != -1; i++) {
        if (buff[2 * i + 1] == pos) {
            free(buff);
            return 1;
        }
    }
    free(buff);
    return 0;
}
static void legalmove(bool color, board white, board black, int* arr) {//have to make a move and find whether king is checked
    int* buff = (int*)malloc(sizeof(int) * 2000);
    board* chessboard=(board*)malloc(sizeof(board)*2);
    int pos;
    legal_move_generator_withoutcheck(color, white, black, buff);
    for (int i = 0; i < 2000; i+=2) {
        chessboard[0] = white;
        chessboard[1] = black;
        if (buff[i] == -1) {
            break;
        }
        move(chessboard, white, black, buff[i], buff[i + 1]);
        if (!color) {
            pos=location(chessboard[0].king, 0);
        }
        else {
            pos = location(chessboard[1].king, 0);
        }
        if (isattacked(color, chessboard[0], chessboard[1], pos)) {
            buff[i] = -2;
            buff[i + 1] = -2;
        }
    }
    for (int i = 0; i < 2000; i++) {
        arr[i] = buff[i];
    }
    free(buff);

}
//return 1 when selected square is attacked
static int eval(board white, board black) {
    int sum;
    sum = (popcnt(white.pawn) + 3 * popcnt(white.knight) + 3 * popcnt(white.bishop) + 5 * popcnt(white.rook) + 9 * popcnt(white.queen)) - (popcnt(black.pawn) + 3 * popcnt(black.knight) + 3 * popcnt(black.bishop) + 5 * popcnt(black.rook) + 9 * popcnt(black.queen));
    return sum;
}
static void printboard(bool color,board white, board black) {//0==white
    int pos;
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            if (!color) {
                pos = convert(j,7-i);
            }
            else {
                pos = convert(7-j,i);
            }
            if ((white.pawn >> pos) & 1) { printf("p"); }
            else if ((white.knight >> pos) & 1) { printf("n"); }
            else if ((white.bishop >> pos) & 1) { printf("b"); }
            else if ((white.rook >> pos) & 1) { printf("r"); }
            else if ((white.queen >> pos) & 1) { printf("q"); }
            else if ((white.king >> pos) & 1) { printf("k"); }
            else if ((black.pawn >> pos) & 1) { printf("P"); }
            else if ((black.knight >> pos) & 1) { printf("N"); }
            else if ((black.bishop >> pos) & 1) { printf("B"); }
            else if ((black.rook >> pos) & 1) { printf("R"); }
            else if ((black.queen >> pos) & 1) { printf("Q"); }
            else if ((black.king >> pos) & 1) { printf("K"); }
            else { printf("*"); }
        }
        printf("\n");
    }
}
int search(int color, int depth, board white, board black){
    int* move_to_eval=(int*)malloc(sizeof(int)*2000);
    int minimax=0;
    int val;
    int p1;
    int p2;
    board *chessboard=(board*)malloc(sizeof(board)*2);
    if(depth==1){
        free(move_to_eval);
        free(chessboard);
        return eval(white,black);
    }
    legalmove(color,white,black,move_to_eval);
    for(int i=0;move_to_eval[i]!=-1;i+=2){
        if(move_to_eval[i]!=-2){
            move(chessboard,white,black,move_to_eval[i],move_to_eval[i+1]);
            val=search(!color,depth+1,chessboard[0],chessboard[1]);
            if(!color){
                if(minimax<=val){
                    minimax=val;
                    p1=move_to_eval[i];
                    p2=move_to_eval[i+1];
                }
            }
            else{
                if(minimax>=val){
                    minimax=val;
                    p1=move_to_eval[i];
                    p2=move_to_eval[i+1];
                }
            }
        }
    }
    free(move_to_eval);
    free(chessboard);
    return p2;
}
int main() {
    printf("%d",search(0,0,white,black));
    return 0;
}
