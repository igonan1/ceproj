//
//
//
//
//
//16...
//8,9,10,11,12,13,14,15,
//0,1,2,3,4,5,6,7, (1rank)
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
int convert(int x, int y) {
    return x + 8 * y;
}
struct bitboard {
    uint64_t pawn;
    uint64_t knight;
    uint64_t bishop;
    uint64_t rook;
    uint64_t queen;
    uint64_t king;
};
typedef struct bitboard board;
board white = { (uint64_t)(0xFF00),(uint64_t)(0b01000010),(uint64_t)(0b00100100),(uint64_t)(0b10000001),(uint64_t)(0b00010000),(uint64_t)0b00001000 };
board black = { (uint64_t)0xff << 48,(uint64_t)0b01000010 << 56,(uint64_t)0b00100100 << 56,(uint64_t)0b10000001 << 56,(uint64_t)0b00010000 << 56,(uint64_t)0b00001000 << 56 };
int buffer[1000];//store moves
int popcnt(uint64_t n) {
    uint64_t a = n;
    int depth = 0;
    for (int i = 0; a != 0; i++) {
        a = a & (a - 1);
        depth++;
    }
    return depth;
}
uint8_t location(uint64_t selected_board, uint8_t n) {//location of nth bit
    int count = 0;
    uint8_t table[64] = { 0 };
    if ((n > popcnt(selected_board)) | (popcnt(selected_board) == 0)) {
        return 0;//invalid
    }
    for (int i = 0; i < 64; i++) {
        if ((selected_board >> i) & 1) {
            table[count] = i;
            count++;
        }
    }
    return table[n];
}
bool check_square(board friendly, board enemy, uint8_t pos, int color) {//0=friendly 1=enemy 2=all
    if (color == 0) {
        if (((friendly.pawn >> pos) & 1) | ((friendly.knight >> pos) & 1) | ((friendly.bishop >> pos) & 1) | ((friendly.rook >> pos) & 1) | ((friendly.queen >> pos) & 1) | ((friendly.king >> pos) & 1)) { return 1; }
    }
    if (color == 1) {
        if (((enemy.pawn >> pos) & 1) | ((enemy.knight >> pos) & 1) | ((enemy.bishop >> pos) & 1) | ((enemy.rook >> pos) & 1) | ((enemy.queen >> pos) & 1) | ((enemy.king >> pos) & 1)) { return 1; }
    }
    if (color == 2) {
        if (((friendly.pawn >> pos) & 1) | ((friendly.knight >> pos) & 1) | ((friendly.bishop >> pos) & 1) | ((friendly.rook >> pos) & 1) | ((friendly.queen >> pos) & 1) | ((friendly.king >> pos) & 1)) {
            if (((enemy.pawn >> pos) & 1) | ((enemy.knight >> pos) & 1) | ((enemy.bishop >> pos) & 1) | ((enemy.rook >> pos) & 1) | ((enemy.queen >> pos) & 1) | ((enemy.king >> pos) & 1)) { return 1; }
        }
    }
    return 0;
}
void legal_move_generator(board friendly, board enemy) {//friendly!=white
    int* table;
    table = (int*)malloc(2000 * sizeof(int));//form of (original coordinate, next coordinate), 0~5th bit to board, 6th bit to promote to bishop, 7th bit to knight, 8th bit to rook, 9th bit to queen
    int length = 0;
    int pos;
    int x;
    int y;
    int knight_move[8][2] = { {1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1} };//dx,dy
    int king_move[8][2] = { {1,1},{1,-1},{-1,1},{-1,-1},{1,0},{0,-1},{-1,0},{0,1} };
    int bishop_move[4][2] = { {1,1},{1,-1},{-1,1},{-1,-1} };
    int rook_move[4][2] = { {1,0},{-1,0},{0,1},{0,-1} };
    for (int i = 0; i < popcnt(friendly.pawn); i++) {//pawn
        pos = location(friendly.pawn, i);
        x = pos % 8;
        y = pos / 8;
        if (!check_square(friendly, enemy, pos + 8, 2)) {
            if (y == 7) {
                for (int j = 6; j < 10; j++) {//promotion
                    table[length] = pos;
                    table[length + 1] = (pos + 8) & (1 << j);
                    length += 2;
                }
            }
            else {//move 1sq forward
                table[length] = pos;
                table[length + 1] = pos + 8;
                length += 2;
                if (y == 1) {//move 2sq forward when y==1
                    if (!check_square(friendly, enemy, pos + 16, 2)) {
                        table[length] = pos;
                        table[length + 1] = pos + 16;
                        length += 2;
                    }
                }
                if (x != 0) {//left capture
                    if (check_square(friendly, enemy, pos + 7, 1)) {
                        table[length] = pos;
                        table[length + 1] = pos + 8;
                        length += 2;
                    }
                }
                if (x != 7) {//right capture
                    if (check_square(friendly, enemy, pos + 9, 1)) {
                        table[length] = pos;
                        table[length + 1] = pos + 8;
                        length += 2;
                    }
                }
            }
        }
    }
    for (int i = 0; i < popcnt(friendly.knight); i++) {
        pos = location(friendly.knight, i);
        x = pos % 8;
        y = pos / 8;
        for (int j = 0; j < 8; j++) {
            if ((0 <= x + knight_move[j][0]) & (x + knight_move[j][0] < 8) & (0 <= y + knight_move[j][1]) & (y + knight_move[j][1] < 8)) {
                if (!check_square(friendly, enemy, convert(x + knight_move[j][0], y + knight_move[j][1]), 0)) {
                    table[length] = pos;
                    table[length + 1] = convert(x + knight_move[j][0], y + knight_move[j][1]);
                    length += 2;
                }
            }
        }
    }
    for (int i = 0; i < popcnt(friendly.bishop); i++) {
        pos = location(friendly.bishop, i);
        x = pos % 8;
        y = pos / 8;
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k < 8; k++) {
                if ((0 <= x + k * bishop_move[j][0]) && (x + k * bishop_move[j][0] < 8) && (0 <= y + k * bishop_move[j][1]) && (y + k * bishop_move[j][1] < 8)) {
                    if (!check_square(friendly, enemy, convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]), 0)) {
                        table[length] = pos;
                        table[length + 1] = convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]);
                        length += 2;
                        if(check_square(friendly, enemy, convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]), 1)){
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
    }
    for (int i = 0; i < popcnt(friendly.rook); i++) {
        pos = location(friendly.rook, i);
        x = pos % 8;
        y = pos / 8;
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k < 8; k++) {
                if ((0 <= x + k * rook_move[j][0]) & (x + k * rook_move[j][0] < 8) & (0 <= y + k * rook_move[j][1]) & (y + k * rook_move[j][1] < 8)) {
                    if (!check_square(friendly, enemy, convert(x + k * rook_move[j][0], y + k * rook_move[j][1]), 0)) {
                        table[length] = pos;
                        table[length + 1] = convert(x + k * rook_move[j][0], y + k * rook_move[j][1]);
                        length += 2;
                        if(check_square(friendly, enemy, convert(x + k * rook_move[j][0], y + k * rook_move[j][1]), 1)){
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
    }
    for (int i = 0; i < popcnt(friendly.queen); i++) {
        pos = location(friendly.queen, i);
        x = pos % 8;
        y = pos / 8;
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k < 8; k++) {
                if ((0 <= x + k * rook_move[j][0]) & (x + k * rook_move[j][0] < 8) & (0 <= y + k * rook_move[j][1]) & (y + k * rook_move[j][1] < 8)) {
                    if (!check_square(friendly, enemy, convert(x + k * rook_move[j][0], y + k * rook_move[j][1]), 0)) {
                        table[length] = pos;
                        table[length + 1] = convert(x + k * rook_move[j][0], y + k * rook_move[j][1]);
                        length += 2;
                        if(check_square(friendly, enemy, convert(x + k * rook_move[j][0], y + k * rook_move[j][1]), 1)){
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
        for (int j = 0; j < 4; j++) {
            for (int k = 1; k < 8; k++) {
                if ((0 <= x + k * bishop_move[j][0]) & (x + k * bishop_move[j][0] < 8) & (0 <= y + k * bishop_move[j][1]) & (y + k * bishop_move[j][1] < 8)) {
                    if (!check_square(friendly, enemy, convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]), 0)) {
                        table[length] = pos;
                        table[length + 1] = convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]);
                        length += 2;
                        if(check_square(friendly, enemy, convert(x + k * bishop_move[j][0], y + k * bishop_move[j][1]), 1)){
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
    }
    pos = location(friendly.king, 0);
    x = pos % 8;
    y = pos / 8;
    for (int j = 0; j < 8; j++) {
        if ((0 <= x + king_move[j][0]) & (x + king_move[j][0] < 8) & (0 <= y + king_move[j][1]) & (y + king_move[j][1] < 8)) {
            if (!check_square(friendly, enemy, convert(x + king_move[j][0], y + king_move[j][1]), 0)) {
                table[length] = pos;
                table[length + 1] = convert(x + king_move[j][0], y + king_move[j][1]);
                length += 2;
            }
        }
    }
    for (int i = 0; i < length; i++) {
        buffer[i] = table[i];
    }
    free(table);
}
int eval(board friendly,board enemy){
    int sum;
    sum=(popcnt(friendly.pawn)+3*popcnt(friendly.knight)+3*popcnt(friendly.bishop)+5*popcnt(friendly.rook)+9*popcnt(friendly.queen))-(popcnt(enemy.pawn)+3*popcnt(enemy.knight)+3*popcnt(enemy.bishop)+5*popcnt(enemy.rook)+9*popcnt(enemy.queen));
    return sum;
}
void search(board friendly, board enemy){
    legal_move_generator(friendly,enemy);
    int depth=0;
}
int main() {
    legal_move_generator(white,black);
    for(int i=0;i<100;i++){
        printf("%d,",buffer[i]);
    }
    return 0;
    
}
